
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gpzoytysrrormkmytmyk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdwem95dHlzcnJvcm1rbXl0bXlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5NTU0NTgsImV4cCI6MjA1OTUzMTQ1OH0.8H6jkUG_HkwqZfx6PlQIw9VTetifpYv7OYRJ2KM9W4g";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Initialize storage buckets
(async () => {
  try {
    // Check if buckets exist
    const { data: buckets } = await supabase.storage.listBuckets();
    
    const bucketsList = {
      avatars: false,
      exam_papers: false,
      solutions: false,
      wbjee_papers: false,
      wbjee_solutions: false,
      jee_mains_papers: false,
      jee_mains_solutions: false,
      jee_advanced_papers: false,
      jee_advanced_solutions: false
    };
    
    // Check which buckets already exist
    buckets?.forEach(b => {
      if (bucketsList.hasOwnProperty(b.name)) {
        bucketsList[b.name as keyof typeof bucketsList] = true;
      }
    });
    
    // Create avatars bucket if it doesn't exist
    if (!bucketsList.avatars) {
      await supabase.storage.createBucket('avatars', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 2 // 2MB
      });
      console.log('Created avatars bucket');
    }
    
    // Create exam_papers bucket if it doesn't exist
    if (!bucketsList.exam_papers) {
      await supabase.storage.createBucket('exam_papers', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created exam_papers bucket');
    }
    
    // Create solutions bucket if it doesn't exist
    if (!bucketsList.solutions) {
      await supabase.storage.createBucket('solutions', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created solutions bucket');
    }
    
    // Create WBJEE papers bucket
    if (!bucketsList.wbjee_papers) {
      await supabase.storage.createBucket('wbjee_papers', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created wbjee_papers bucket');
    }
    
    // Create WBJEE solutions bucket
    if (!bucketsList.wbjee_solutions) {
      await supabase.storage.createBucket('wbjee_solutions', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created wbjee_solutions bucket');
    }
    
    // Create JEE MAINS papers bucket
    if (!bucketsList.jee_mains_papers) {
      await supabase.storage.createBucket('jee_mains_papers', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created jee_mains_papers bucket');
    }
    
    // Create JEE MAINS solutions bucket
    if (!bucketsList.jee_mains_solutions) {
      await supabase.storage.createBucket('jee_mains_solutions', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created jee_mains_solutions bucket');
    }
    
    // Create JEE ADVANCED papers bucket
    if (!bucketsList.jee_advanced_papers) {
      await supabase.storage.createBucket('jee_advanced_papers', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created jee_advanced_papers bucket');
    }
    
    // Create JEE ADVANCED solutions bucket
    if (!bucketsList.jee_advanced_solutions) {
      await supabase.storage.createBucket('jee_advanced_solutions', {
        public: true,
        fileSizeLimit: 1024 * 1024 * 10 // 10MB
      });
      console.log('Created jee_advanced_solutions bucket');
    }
  } catch (error) {
    console.error('Error initializing storage buckets:', error);
  }
})();
